"""
Test Script: Absorptivity Validation Against HAPI

Description:
This test script is designed to validate the accuracy of the custom `compute_absorptivity` function
used in the `forwardpass.py` module by comparing its results to those generated by the HITRAN
Application Programming Interface (HAPI). HAPI is a well-established library for spectral data
manipulation based on the HITRAN database.

Purpose:
The purpose of this test is to ensure that the custom implementation of the absorptivity calculation
produces results consistent with HAPI's validated algorithms for similar physical and environmental
conditions. This validation builds confidence in the correctness of the `compute_absorptivity` function
and its integration within the overall pipeline for photoacoustic signal modeling.

How It Works:
1. **HAPI Setup and Data Fetching**:
   - HAPI fetches CO2 line-by-line data for isotopologue 1 in the wavenumber range 4000–4500 cm⁻¹.
   - The `absorptionCoefficient_Voigt` function calculates absorption coefficients using the Voigt
     profile and the specified environmental parameters.

2. **Custom Absorptivity Calculation**:
   - The custom `compute_absorptivity` function is invoked with similar conditions, including:
     - Wavenumber range (converted to wavelengths).
     - Temperature, pressure, and gas concentration.
   - HITRAN data is loaded using the `parse_hitran` function to match the format used by the custom function.

3. **Validation**:
   - The outputs of HAPI and the custom function are compared for shape consistency.
   - The maximum absolute difference between the two results is computed to ensure it lies within a
     specified tolerance (10^{-3}).

4. **Visualization**:
   - A plot compares the HAPI and custom absorptivity results across the wavenumber grid for visual validation.

Assumptions and Simplifications:
- This script assumes that the partition function used in `compute_absorptivity` is consistent with
  HAPI's implementation (e.g., PYTIPS).
- A basic gas mixture (e.g., 80% air, 20% self-broadening) is used to validate the custom function.
- Numerical resolution (e.g., step size) and other environmental parameters are carefully aligned between HAPI
  and the custom implementation to avoid discrepancies.

Usage:
- Run this script to verify the consistency of the `compute_absorptivity` function.
- The script will print a success message if validation passes and show a plot for visual comparison.
- If discrepancies arise, check for mismatches in parameters or differences in broadening or partition
  function calculations.

Requirements:
- Ensure that the HAPI library is installed and configured correctly.
- Place this script in the `tests` folder of the project.
- Update paths or parameters as needed to test other gases, wavenumber ranges, or environmental conditions.

"""
#TODO: CHANGE ALL DIRECTORY PATHS THAT ARE REFERENCED TO BE RAN AS MODULES FROM THE PROJECT BASE FOLDER. I SHOULD MAYBE CONSIDER DOING EVERYTHING THIS WAY
import torch
from hapi import *
from src.calculations.forwardpass import compute_absorptivity
from src.data_processing.parse_hitran import parse_hitran
import matplotlib.pyplot as plt

def test_absorptivity_against_hapi():
    """
    Validate the custom compute_absorptivity function against HAPI's absorptionCoefficient_Voigt.
    """

    # Step 1: Initialize HAPI and fetch HITRAN data
    db_begin('HITRAN_Data')
    numin=2260
    numax=2400
    fetch('CO2', 2, 1, numin=numin, numax=numax)  # CO2 molecule, isotopologue 1

    # Step 2: Define conditions
    temperature = 296  # Temperature in K
    pressure = 1.0  # Pressure in atm
    path_length = 1.0  # Path length in cm
    concentration = 0.01  # Mole fraction of CO2
    wavenumber_range = [numin, numax]  # Wavenumber range (cm^-1)
    wavenumber_step = 0.01  # Step size for wavenumber grid
    diluent = {'air': 0.8, 'self': 0.2}  # Example gas mixture

    # Step 3: Calculate absorption coefficients using HAPI
    nu, coef_hapi = absorptionCoefficient_Voigt(
        SourceTables='CO2',
        Environment={'T': temperature, 'p': pressure},
        WavenumberRange=wavenumber_range,
        WavenumberStep=wavenumber_step,
        Diluent=diluent
    )

    # Step 4: Calculate absorptivity using custom function
    # Parse HITRAN data for custom calculation
    hitran_data = parse_hitran(
        file_base='../data/HITRAN/CO2',
        wavenumber_ranges=[(numin, numax)]
    )

    # Convert wavenumber grid to wavelengths (in microns)
    light_source_wavelengths = 1e4 / torch.tensor(nu)  # Convert cm^-1 to microns

    # Define light source properties
    light_source = {'wavelengths': light_source_wavelengths}

    # Compute absorptivity with custom function
    absorptivity_custom = compute_absorptivity(
        hitran_data={'CO2': hitran_data},
        concentrations={'CO2': concentration},
        light_source=light_source,
        pressure=pressure,
        temperature=temperature
    )

    # Step 5: Validate Results
    # Ensure matching dimensions
    assert absorptivity_custom.shape == torch.tensor(coef_hapi).shape, \
        "Shape mismatch between custom and HAPI results."

    # Compute maximum difference
    max_diff = torch.max(torch.abs(absorptivity_custom - torch.tensor(coef_hapi)))
    assert max_diff < 1e-3, f"Absorptivity mismatch too large: max_diff={max_diff.item()}"

    # Step 6: Visualize Results
    plt.figure(figsize=(10, 6))
    plt.plot(nu, coef_hapi, label='HAPI Absorption Coefficient', linestyle='--')
    plt.plot(nu, absorptivity_custom.detach().numpy(), label='Custom Absorptivity')
    plt.xlabel('Wavenumber (cm⁻¹)')
    plt.ylabel('Absorptivity')
    plt.legend()
    plt.title('Absorptivity Comparison: HAPI vs Custom')
    plt.grid()
    plt.show()

    print("Validation passed: Custom absorptivity matches HAPI within tolerance.")


if __name__ == "__main__":
    test_absorptivity_against_hapi()
